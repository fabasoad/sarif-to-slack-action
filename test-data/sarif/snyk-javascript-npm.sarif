{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Snyk Open Source",
          "properties": {
            "artifactsScanned": 69
          },
          "rules": [
            {
              "id": "SNYK-JS-BODYPARSER-7926860",
              "shortDescription": {
                "text": "High severity - Asymmetric Resource Consumption (Amplification) vulnerability in body-parser"
              },
              "fullDescription": {
                "text": "(CVE-2024-45590) body-parser@1.19.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: body-parser\n* Introduced through: npm-goof@0.0.1 and body-parser@1.19.0\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › body-parser@1.19.0\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › body-parser@1.19.0\n# Overview\n\nAffected versions of this package are vulnerable to Asymmetric Resource Consumption (Amplification) via the `extendedparser` and `urlencoded` functions when the URL encoding process is enabled. An attacker can flood the server with a large number of specially crafted requests.\n# Remediation\nUpgrade `body-parser` to version 1.20.3 or higher.\n# References\n- [GitHub Commit](https://github.com/expressjs/body-parser/commit/b2695c4450f06ba3b0ccf48d872a229bb41c9bce)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-405",
                  "npm"
                ],
                "cvssv3_baseScore": 8.2,
                "security-severity": "8.2"
              }
            },
            {
              "id": "SNYK-JS-COOKIE-8163060",
              "shortDescription": {
                "text": "Medium severity - Cross-site Scripting (XSS) vulnerability in cookie"
              },
              "fullDescription": {
                "text": "(CVE-2024-47764) cookie@0.4.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: cookie\n* Introduced through: npm-goof@0.0.1, express@4.17.1 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › cookie@0.4.0\n# Overview\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) via the cookie `name`, `path`, or `domain`, which can be used to set unexpected values to other cookie fields.\r\n\r\n# Workaround\r\nUsers who are not able to upgrade to the fixed version should avoid passing untrusted or arbitrary values for the cookie fields and ensure they are set by the application instead of user input.\n# Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n## Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n## Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n# Remediation\nUpgrade `cookie` to version 0.7.0 or higher.\n# References\n- [GitHub Commit](https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c)\n- [GitHub PR](https://github.com/jshttp/cookie/pull/167)\n- [Red Hat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2316549)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "npm"
                ],
                "cvssv3_baseScore": 6.3,
                "security-severity": "6.3"
              }
            },
            {
              "id": "SNYK-JS-EXPRESS-6474509",
              "shortDescription": {
                "text": "Medium severity - Open Redirect vulnerability in express"
              },
              "fullDescription": {
                "text": "(CVE-2024-29041) express@4.17.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: express\n* Introduced through: npm-goof@0.0.1 and express@4.17.1\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1\n# Overview\n[express](https://github.com/expressjs/express) is a minimalist web framework.\n\nAffected versions of this package are vulnerable to Open Redirect due to the implementation of URL encoding using `encodeurl` before passing it to the `location` header. This can lead to unexpected evaluations of malformed URLs by common redirect allow list implementations in applications, allowing an attacker to bypass a properly implemented allow list and redirect users to malicious sites.\n# Remediation\nUpgrade `express` to version 4.19.2, 5.0.0-beta.3 or higher.\n# References\n- [Github Commit](https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94)\n- [GitHub Commit](https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd)\n- [Github Issue](https://github.com/koajs/koa/issues/1800)\n- [GitHub PR](https://github.com/expressjs/express/pull/5551)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-601",
                  "npm"
                ],
                "cvssv3_baseScore": 6.1,
                "security-severity": "6.1"
              }
            },
            {
              "id": "SNYK-JS-EXPRESS-7926867",
              "shortDescription": {
                "text": "Medium severity - Cross-site Scripting vulnerability in express"
              },
              "fullDescription": {
                "text": "(CVE-2024-43796) express@4.17.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: express\n* Introduced through: npm-goof@0.0.1 and express@4.17.1\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1\n# Overview\n[express](https://github.com/expressjs/express) is a minimalist web framework.\n\nAffected versions of this package are vulnerable to Cross-site Scripting due to improper handling of user input in the `response.redirect` method. An attacker can execute arbitrary code by passing malicious input to this method.\r\n\r\n\r\n**Note**\r\n\r\nTo exploit this vulnerability, the following conditions are required:\r\n\r\n1) The attacker should be able to control the input to `response.redirect()`\r\n\r\n2) express must not redirect before the template appears\r\n\r\n3) the browser must not complete redirection before:\r\n\r\n4) the user must click on the link in the template\n# Remediation\nUpgrade `express` to version 4.20.0, 5.0.0 or higher.\n# References\n- [GitHub Commit](https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "npm"
                ],
                "cvssv3_baseScore": 5.1,
                "security-severity": "5.1"
              }
            },
            {
              "id": "SNYK-JS-MONGODB-5871303",
              "shortDescription": {
                "text": "Medium severity - Information Exposure vulnerability in mongodb"
              },
              "fullDescription": {
                "text": "(CVE-2021-32050) mongodb@4.0.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: mongodb\n* Introduced through: npm-goof@0.0.1 and mongodb@4.0.0\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › mongodb@4.0.0\n# Overview\n[mongodb](https://www.npmjs.com/package/mongodb) is an official MongoDB driver for Node.js.\n\nAffected versions of this package are vulnerable to Information Exposure via the `command listener` feature. When it is enabled (not the default setting), some drivers may inadvertently publish events containing sensitive authentication-related data. An attacker can gain access to this sensitive information by monitoring these published events.\n# Remediation\nUpgrade `mongodb` to version 3.6.10, 4.17.0, 5.8.0 or higher.\n# References\n- [GitHub Commit](https://github.com/mongodb/mongo-c-driver/commit/8a78b0eb0e08084e166ae65719b8b4ed4fcaa96a)\n- [GitHub Commit](https://github.com/mongodb/mongo-cxx-driver/commit/cf4faedfa96c2b63e846a0ec169d458dfc84dbd4)\n- [GitHub Commit](https://github.com/mongodb/mongo-swift-driver/commit/13ec2c88b9331fd2e0da9b29545f73a3b134d42b)\n- [GitHub Commit](https://github.com/mongodb/node-mongodb-native/commit/b98f2061de9e8b0a814e3e7d39a0e914245953d0)\n- [MongoDB Issue](https://jira.mongodb.org/browse/CDRIVER-3797)\n- [MongoDB Issue](https://jira.mongodb.org/browse/CXX-2028)\n- [MongoDB Issue](https://jira.mongodb.org/browse/NODE-3356)\n- [MongoDB Issue](https://jira.mongodb.org/browse/PHPC-1869)\n- [MongoDB Issue](https://jira.mongodb.org/browse/SWIFT-1229)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "npm"
                ],
                "cvssv3_baseScore": 4.2,
                "security-severity": "4.2"
              }
            },
            {
              "id": "snyk:lic:npm:mongodb:Apache-2.0",
              "shortDescription": {
                "text": "High severity - Apache-2.0 license vulnerability in mongodb"
              },
              "fullDescription": {
                "text": "mongodb@4.0.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Module: mongodb\n* Introduced through: npm-goof@0.0.1 and mongodb@4.0.0\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › mongodb@4.0.0\nApache-2.0 license"
              },
              "properties": {
                "tags": [
                  "security",
                  "npm"
                ],
                "security-severity": "undefined"
              }
            },
            {
              "id": "SNYK-JS-PATHTOREGEXP-7925106",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in path-to-regexp"
              },
              "fullDescription": {
                "text": "(CVE-2024-45296) path-to-regexp@0.1.7"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: path-to-regexp\n* Introduced through: npm-goof@0.0.1, express@4.17.1 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › path-to-regexp@0.1.7\n# Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when including multiple regular expression parameters in a single segment, which will produce the regular expression `/^\\/([^\\/]+?)-([^\\/]+?)\\/?$/`, if two parameters within a single segment are separated by a character other than a `/` or `.`. Poor performance will block the event loop and can lead to a DoS.\r\n\r\n**Note:**\r\nWhile the 8.0.0 release has completely eliminated the vulnerable functionality, prior versions that have received the patch to mitigate backtracking may still be vulnerable if custom regular expressions are used. So it is strongly recommended for regular expression input to be controlled to avoid malicious performance degradation in those versions. This behavior is enforced as of version 7.1.0 via the `strict` option, which returns an error if a dangerous regular expression is detected.\r\n\r\n# Workaround\r\nThis vulnerability can be avoided by using a custom regular expression for parameters after the first in a segment, which excludes `-` and `/`.\n# PoC\n```js\r\n/a${'-a'.repeat(8_000)}/a\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `path-to-regexp` to version 0.1.10, 1.9.0, 3.3.0, 6.3.0, 8.0.0 or higher.\n# References\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/f73ec6c86b06f544b977119c2b62a16de480a6a9)\n- [Strict Mode Release Note](https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0)\n- [Vulnerability Write-up](https://blakeembrey.com/posts/2024-09-web-redos/)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1333",
                  "npm"
                ],
                "cvssv3_baseScore": 6.9,
                "security-severity": "6.9"
              }
            },
            {
              "id": "SNYK-JS-PATHTOREGEXP-8482416",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in path-to-regexp"
              },
              "fullDescription": {
                "text": "(CVE-2024-52798) path-to-regexp@0.1.7"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: path-to-regexp\n* Introduced through: npm-goof@0.0.1, express@4.17.1 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › path-to-regexp@0.1.7\n# Overview\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) when including multiple regular expression parameters in a single segment, when the separator is not `.` (e.g. no `/:a-:b`). Poor performance will block the event loop and can lead to a DoS.\r\n\r\n**Note:**\r\n\r\nThis issue is caused due to an incomplete fix for [CVE-2024-45296](https://security.snyk.io/vuln/SNYK-JS-PATHTOREGEXP-7925106).\r\n\r\n# Workarounds\r\n\r\nThis can be mitigated by avoiding using two parameters within a single path segment, when the separator is not `.` (e.g. no `/:a-:b`). Alternatively, the regex used for both parameters can be defined to ensure they do not overlap to allow backtracking.\n# PoC\n```js\r\n/a${'-a'.repeat(8_000)}/a\r\n```\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n# Remediation\nUpgrade `path-to-regexp` to version 0.1.12 or higher.\n# References\n- [Blog Post](https://blakeembrey.com/posts/2024-09-web-redos)\n- [GitHub Commit](https://github.com/pillarjs/path-to-regexp/commit/f01c26a013b1889f0c217c643964513acf17f6a4)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1333",
                  "npm"
                ],
                "cvssv3_baseScore": 6.9,
                "security-severity": "6.9"
              }
            },
            {
              "id": "SNYK-JS-QS-3153490",
              "shortDescription": {
                "text": "High severity - Prototype Poisoning vulnerability in qs"
              },
              "fullDescription": {
                "text": "(CVE-2022-24999) qs@6.7.0"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: qs\n* Introduced through: npm-goof@0.0.1, body-parser@1.19.0 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › body-parser@1.19.0 › qs@6.7.0\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › qs@6.7.0\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › body-parser@1.19.0 › qs@6.7.0\n# Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Poisoning which allows attackers to cause a Node process to hang, processing an Array object whose prototype has been replaced by one with an excessive length value.\r\n\r\n**Note:** In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as `a[__proto__]=b&a[__proto__]&a[length]=100000000`.\n\n# Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](https://security.snyk.io/vuln/SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n# Remediation\nUpgrade `qs` to version 6.2.4, 6.3.3, 6.4.1, 6.5.3, 6.6.1, 6.7.3, 6.8.3, 6.9.7, 6.10.3 or higher.\n# References\n- [GitHub PR](https://github.com/ljharb/qs/pull/428)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2150323)\n- [Researcher Advisory](https://github.com/n8tz/CVE-2022-24999)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-1321",
                  "npm"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JS-SEND-7926862",
              "shortDescription": {
                "text": "Low severity - Cross-site Scripting vulnerability in send"
              },
              "fullDescription": {
                "text": "(CVE-2024-43799) send@0.17.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: send\n* Introduced through: npm-goof@0.0.1, express@4.17.1 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › send@0.17.1\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › serve-static@1.14.1 › send@0.17.1\n# Overview\n[send](https://github.com/pillarjs/send) is a Better streaming static file server with Range and conditional-GET support\n\nAffected versions of this package are vulnerable to Cross-site Scripting due to improper user input sanitization passed to the `SendStream.redirect()` function, which executes untrusted code. An attacker can execute arbitrary code by manipulating the input parameters to this method.\r\n\r\n**Note:**\r\n\r\nExploiting this vulnerability requires the following:\r\n\r\n1) The attacker needs to control the input to `response.redirect()`\r\n\r\n2) Express MUST NOT redirect before the template appears\r\n\r\n3) The browser MUST NOT complete redirection before\r\n\r\n4) The user MUST click on the link in the template\n# Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n## Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n## Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n# Remediation\nUpgrade `send` to version 0.19.0, 1.1.0 or higher.\n# References\n- [GitHub Commit](https://github.com/pillarjs/send/commit/ae4f2989491b392ae2ef3b0015a019770ae65d35)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "npm"
                ],
                "cvssv3_baseScore": 2.1,
                "security-severity": "2.1"
              }
            },
            {
              "id": "SNYK-JS-SERVESTATIC-7926865",
              "shortDescription": {
                "text": "Low severity - Cross-site Scripting vulnerability in serve-static"
              },
              "fullDescription": {
                "text": "(CVE-2024-43800) serve-static@1.14.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Vulnerable module: serve-static\n* Introduced through: npm-goof@0.0.1, express@4.17.1 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › express@4.17.1 › serve-static@1.14.1\n# Overview\n[serve-static](https://github.com/expressjs/serve-static) is a server.\n\nAffected versions of this package are vulnerable to Cross-site Scripting due to improper sanitization of user input in the `redirect` function. An attacker can manipulate the redirection process by injecting malicious code into the input. \r\n\r\n\r\n**Note**\r\n\r\nTo exploit this vulnerability, the following conditions are required:\r\n\r\n1) The attacker should be able to control the input to `response.redirect()`\r\n\r\n2) express must not redirect before the template appears\r\n\r\n3) the browser must not complete redirection before:\r\n\r\n4) the user must click on the link in the template\n# Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n## Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n## Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n## How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n# Remediation\nUpgrade `serve-static` to version 1.16.0, 2.1.0 or higher.\n# References\n- [GitHub Commit](https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b)\n- [GitHub Commit](https://github.com/expressjs/serve-static/commit/ce730896fddce1588111d9ef6fdf20896de5c6fa)\n"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "npm"
                ],
                "cvssv3_baseScore": 2.1,
                "security-severity": "2.1"
              }
            },
            {
              "id": "snyk:lic:npm:bson:Apache-2.0",
              "shortDescription": {
                "text": "High severity - Apache-2.0 license vulnerability in bson"
              },
              "fullDescription": {
                "text": "bson@4.7.2"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Module: bson\n* Introduced through: npm-goof@0.0.1, mongodb@4.0.0 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › mongodb@4.0.0 › bson@4.7.2\nApache-2.0 license"
              },
              "properties": {
                "tags": [
                  "security",
                  "npm"
                ],
                "security-severity": "undefined"
              }
            },
            {
              "id": "snyk:lic:npm:denque:Apache-2.0",
              "shortDescription": {
                "text": "High severity - Apache-2.0 license vulnerability in denque"
              },
              "fullDescription": {
                "text": "denque@1.5.1"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Module: denque\n* Introduced through: npm-goof@0.0.1, mongodb@4.0.0 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › mongodb@4.0.0 › denque@1.5.1\nApache-2.0 license"
              },
              "properties": {
                "tags": [
                  "security",
                  "npm"
                ],
                "security-severity": "undefined"
              }
            },
            {
              "id": "snyk:lic:npm:mongodb-connection-string-url:Apache-2.0",
              "shortDescription": {
                "text": "High severity - Apache-2.0 license vulnerability in mongodb-connection-string-url"
              },
              "fullDescription": {
                "text": "mongodb-connection-string-url@1.1.2"
              },
              "help": {
                "text": "",
                "markdown": "* Package Manager: npm\n* Module: mongodb-connection-string-url\n* Introduced through: npm-goof@0.0.1, mongodb@4.0.0 and others\n### Detailed paths\n* _Introduced through_: npm-goof@0.0.1 › mongodb@4.0.0 › mongodb-connection-string-url@1.1.2\nApache-2.0 license"
              },
              "properties": {
                "tags": [
                  "security",
                  "npm"
                ],
                "security-severity": "undefined"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JS-BODYPARSER-7926860",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable body-parser package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "body-parser@1.19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to body-parser@1.20.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "body-parser@1.20.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-COOKIE-8163060",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cookie package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cookie@0.4.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.21.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.21.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-EXPRESS-6474509",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable express package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "express@4.17.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.19.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.19.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-EXPRESS-7926867",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable express package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "express@4.17.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.20.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.20.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-MONGODB-5871303",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable mongodb package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "mongodb@4.0.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to mongodb@4.17.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "mongodb@4.17.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "snyk:lic:npm:mongodb:Apache-2.0",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable mongodb package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "mongodb@4.0.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-PATHTOREGEXP-7925106",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable path-to-regexp package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "path-to-regexp@0.1.7"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.20.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.20.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-PATHTOREGEXP-8482416",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable path-to-regexp package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "path-to-regexp@0.1.7"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.21.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.21.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-QS-3153490",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable qs package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "qs@6.7.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to body-parser@1.19.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "body-parser@1.19.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-SEND-7926862",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable send package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "send@0.17.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.20.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.20.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JS-SERVESTATIC-7926865",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable serve-static package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "serve-static@1.14.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to express@4.20.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "package.json"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "express@4.20.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "snyk:lic:npm:bson:Apache-2.0",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable bson package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "bson@4.7.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "snyk:lic:npm:denque:Apache-2.0",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable denque package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "denque@1.5.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "snyk:lic:npm:mongodb-connection-string-url:Apache-2.0",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable mongodb-connection-string-url package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "package.json"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "mongodb-connection-string-url@1.1.2"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
